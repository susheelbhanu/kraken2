"""
Author: Susheel Bhanu BUSI
Affiliation: ESB group LCSB UniLU
Date: [2021-05-30]
Run: snakemake -s Snakefile --use-conda --cores 4 -rp
Latest modification:
Purpose: To convert Kraken output to phyloseq input
"""

############################################
configfile:"config/kraken2_config.yaml"

DATA_DIR=config['data_dir']
RESULTS_DIR=config['results_dir']
ENV_DIR=config['env_dir']
SAMPLES=[line.strip() for line in open("config/kraken2_sample_list", 'r')]


rule all:
    input:
        expand(os.path.join(RESULTS_DIR, "{sid}_kraken.report"), sid=SAMPLES), 
        expand(os.path.join(RESULTS_DIR, "struo2_{sid}_kraken.report"), sid=SAMPLES)

############################################
localrules: phyloseq_input_kraken2


############################################
# Taxonomic classification using KRAKEN2
rule kraken2:
    input:
        os.path.join(DATA_DIR, "{sid}_R1.fastq.gz"),
        os.path.join(DATA_DIR, "{sid}_R2.fastq.gz")
    output:
        report=os.path.join(RESULTS_DIR, "{sid}_kraken.report"),
        summary=os.path.join(RESULTS_DIR, "{sid}_kraken.out")
    conda:
        os.path.join(ENV_DIR, "kraken2.yaml")
    threads:
        config['kraken2']['threads']
    params:
        db=config['kraken2']['db']
    log:
        os.path.join(RESULTS_DIR, "logs/kraken2.{sid}.log")
    message:
        "Running kraken2 on {wildcards.sid}"
    shell:
        "(date && kraken2 --threads {threads} --db {params.db} --paired --output {output.summary} --report {output.report} {input} && date) &> >(tee {log})"

# Running Struo2 database
use rule kraken2 as struo2_kraken2 with:
    output:
        report=os.path.join(RESULTS_DIR, "struo2_{sid}_kraken.report"),
        summary=os.path.join(RESULTS_DIR, "struo2_{sid}_kraken.out")
    threads:
        config['struo2_kraken2']['threads']
    params:
        db=config['struo2_kraken2']['db']
    log:
        os.path.join(RESULTS_DIR, "logs/struo2_kraken2.{sid}.log")
    message:
        "Running {wildcards.sid} with the Struo2_Kraken2 db"
    

## Convert kraken output to phyloseq input
#rule phyloseq_input_kraken2_sample:
#    input:
#        rules.kraken2.output.report
#    output:
#        biom=temp(os.path.join(RESULTS_DIR, "{sid}.report.biom")),
#        tsv=os.path.join(RESULTS_DIR, "{sid}.report.tsv")
#    wildcard_constraints:
#        sid="|".join(SAMPLES),
#    conda:
#        os.path.join(ENV_DIR, "biom.yaml")
#    message:
#        "Phyloseq input for Kraken2: {wildcards.sid}"
#    shell:
#        # kraken-report -> biom -> TSV
#        "kraken-biom {input} -o {output.biom} --fmt hdf5 && "
#        "biom convert -i {output.biom} -o {output.tsv} --to-tsv --header-key taxonomy && "
#        # add unclassified
#        "echo -e \"\\n0\\t$(grep -P 'U\\t0\\t\s*unclassified$' {input} | cut -f3)\\tk__; p__; c__; o__; f__; g__; s__\" >> {output.tsv}"
#
#rule phyloseq_input_kraken2:
#    input:
#        expand(os.path.join(RESULTS_DIR, "{sid}.report.tsv"), sid=SAMPLES)
#    output:
#        abund=os.path.join(RESULTS_DIR, "phyloseq.kraken_abundance.tsv"),
#        tax=os.path.join(RESULTS_DIR, "phyloseq.kraken_taxonomy.tsv")
#    # wildcard_constraints:
#    #     db="|".join(config["kraken2"]["db"].keys())
#    message:
#        "Phyloseq input for Kraken2"
#    run:
#        import os
#        import re
#        import csv
#        import pandas
#        from collections import OrderedDict
#        
#        from scripts.utils import read_kraken2_report2biom2tsv, lineage2dict, RANKS
#        # Required functions
##        def read_kraken2_report2biom2tsv(ifile_path):
##            import re
##            from pandas import read_csv
##            df = read_csv(
##                ifile_path,
##                sep="\t",
##                comment='#',
##                names=["taxid", "count", "lineage"]
##            )
##            # tax ID: to string
##            df["taxid"] = df["taxid"].apply(lambda x: "taxid_%d" % int(x))
##            # lineage: add "Unknown" if no taxon name and replace separator
##            df["lineage"] = df["lineage"].apply(lambda x: re.sub("__(;|$)", "__Unknown;", x))
##            df["lineage"] = df["lineage"].apply(lambda x: re.sub(";\s*", "|", re.sub(";$", "", x)))
##            # lineage: put genus and species strings together
##            df["lineage"] = df["lineage"].apply(lambda x: lineage_cat_ranks(lin=x, r1="g", r2="s"))
##            return df
##
##        def lineage2dict(lin):
##            import re
##            if lin == "Unknown":
##                return dict([(k, "Unknown") for k in RANKS.keys()])
##            lin = lin.split("|")
##            lin = [re.search("(?P<rank>^[a-zA-Z])__(?P<taxon>.*$)", taxon).groups() for taxon in lin]
##            lin = dict(lin)
##            return lin
##
##        RANKS = OrderedDict({'k': 'kingdom', 'p': 'phylum', 'c': 'class', 'o': 'order', 'f': 'family', 'g': 'genus', 's': 'species'})
#
#        dfs   = None
#        tax_d = dict()
#        for ifile_path in input:
#            sid = os.path.basename(ifile_path).split(".")[0]
#            df  = read_kraken2_report2biom2tsv(ifile_path)
#            df  = df.rename(columns={"count": sid})
#            df.set_index("taxid", drop=True, inplace=True, verify_integrity=True)
#            if dfs is None:
#                dfs = df[[sid]].copy()
#                tax_d.update(df["lineage"].to_dict())
#            else:
#                dfs = dfs.merge(
#                    right=df[[sid]],
#                    how="outer",
#                    left_index=True, right_index=True
#                )
#                tax_d.update(df["lineage"].to_dict())
#        # abundance
#        df_a = dfs.copy()
#        # taxonomy
#        df_t = pandas.DataFrame(index=tax_d.keys(), columns=RANKS.values())
#        for t_id, t_lin in tax_d.items():
#            for t_r, t_n in lineage2dict(t_lin).items():
#                df_t.loc[t_id, RANKS[t_r]] = t_n
#        # save
#        df_a.to_csv(output.abund, sep="\t", header=True, index=True, index_label="taxonID", na_rep=0)
#        df_t.to_csv(output.tax, sep="\t", header=True, index=True, index_label="taxonID")
